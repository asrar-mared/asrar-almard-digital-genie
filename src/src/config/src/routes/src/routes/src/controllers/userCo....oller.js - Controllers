import logger from '../config/logger.js';

// قاعدة بيانات مؤقتة (في المشاريع الحقيقية استخدم MongoDB, PostgreSQL, etc.)
let users = [
  { id: 1, name: 'أحمد محمد', email: 'ahmed@example.com', age: 25 },
  { id: 2, name: 'فاطمة علي', email: 'fatima@example.com', age: 30 }
];

// GET - جلب كل المستخدمين
export const getAllUsers = async (req, res, next) => {
  try {
    const { page = 1, limit = 10, search } = req.query;
    
    let filteredUsers = users;
    
    // البحث
    if (search) {
      filteredUsers = users.filter(u => 
        u.name.toLowerCase().includes(search.toLowerCase()) ||
        u.email.toLowerCase().includes(search.toLowerCase())
      );
    }
    
    // Pagination
    const startIndex = (page - 1) * limit;
    const endIndex = startIndex + parseInt(limit);
    const paginatedUsers = filteredUsers.slice(startIndex, endIndex);
    
    logger.info(`تم جلب ${paginatedUsers.length} مستخدم`);
    
    res.json({
      success: true,
      data: paginatedUsers,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total: filteredUsers.length,
        pages: Math.ceil(filteredUsers.length / limit)
      }
    });
  } catch (error) {
    next(error);
  }
};

// GET - جلب مستخدم واحد
export const getUserById = async (req, res, next) => {
  try {
    const user = users.find(u => u.id === parseInt(req.params.id));
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'المستخدم غير موجود'
      });
    }
    
    res.json({
      success: true,
      data: user
    });
  } catch (error) {
    next(error);
  }
};

// POST - إنشاء مستخدم جديد
export const createUser = async (req, res, next) => {
  try {
    const { name, email, age } = req.body;
    
    // التحقق من وجود البريد
    const existingUser = users.find(u => u.email === email);
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: 'البريد الإلكتروني مستخدم بالفعل'
      });
    }
    
    const newUser = {
      id: users.length > 0 ? Math.max(...users.map(u => u.id)) + 1 : 1,
      name,
      email,
      age
    };
    
    users.push(newUser);
    logger.info(`تم إنشاء مستخدم جديد: ${email}`);
    
    res.status(201).json({
      success: true,
      message: 'تم إنشاء المستخدم بنجاح',
      data: newUser
    });
  } catch (error) {
    next(error);
  }
};

// PUT - تحديث مستخدم
export const updateUser = async (req, res, next) => {
  try {
    const userId = parseInt(req.params.id);
    const userIndex = users.findIndex(u => u.id === userId);
    
    if (userIndex === -1) {
      return res.status(404).json({
        success: false,
        message: 'المستخدم غير موجود'
      });
    }
    
    users[userIndex] = {
      ...users[userIndex],
      ...req.body,
      id: userId // للحفاظ على ID
    };
    
    logger.info(`تم تحديث المستخدم: ${userId}`);
    
    res.json({
      success: true,
      message: 'تم تحديث المستخدم بنجاح',
      data: users[userIndex]
    });
  } catch (error) {
    next(error);
  }
};

// DELETE - حذف مستخدم
export const deleteUser = async (req, res, next) => {
  try {
    const userId = parseInt(req.params.id);
    const userIndex = users.findIndex(u => u.id === userId);
    
    if (userIndex === -1) {
      return res.status(404).json({
        success: false,
        message: 'المستخدم غير موجود'
      });
    }
    
    const deletedUser = users.splice(userIndex, 1)[0];
    logger.info(`تم حذف المستخدم: ${userId}`);
    
    res.json({
      success: true,
      message: 'تم حذف المستخدم بنجاح',
      data: deletedUser
    });
  } catch (error) {
    next(error);
  }
};
